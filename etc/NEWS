cperl-mode -- history of user-visible changes.

Copyright (C) 2020-2020 to be clarified

This file is about changes in cperl-mode version 7.0

See the end of the file for license conditions.

Please file bug reports as issues under the github repository
https://github.com/HaraldJoerg/cperl-mode.

* cperl-mode

** Bug fixes

*** Fontification: "$a++ / $c" is now recognized as a division

Previous versions would take the slash as the start of a regular
expression, fontify it accordingly and get confused about the missing
RE terminator.  Reported by choroba in
https://github.com/jrockway/cperl-mode/issues/45.

*** Fontification: Edge case "terminator occurs in here-doc" fixed

For a non-indented here-doc, the terminator needs to start in the
first column.  Versions following the initial support for indented
here-docs would interpret the terminator string as valid if it is only
preceded by whitespace.
See https://github.com/HaraldJoerg/cperl-mode/issues/4 for details
and testcases.

*** Indentation: Code after "package NAME { ...; }" isn't indented

In previous versions, cperl-mode failed to recognize the braces as a
block and indented the following code as continued statement.

*** Indexing: "package NAME { ...; }" is now available in imenu

In previous versions, neither the package was recognized as such,
nor were subroutines within that package assigned to the correct
namespace.

*** Indexing: M-x cperl-etags no longer throws an error

Emacs 27 has introduced a change which made M-x cperl-etags
break with "(wrong-type-argument stringp cperl-sub-regexp)".

*** Indexing: Tags tools from the menu no longer throw an error

Running any of the entries in the Perl/Tools/Tags menu
failed with "cond: Buffer is read-only: #<buffer TAGS>".
A workaround is in place.

*** Builtin Docs: M-x cperl-perldoc now works on MS Windows.

The "old" code relied on pod2man and the external man command,
which isn't easily available on MS Windows.  Also, man and troff
plus the required "dumb" terminal emulation are just ugly, so
I decided to jettison that as well.  But that deserves an entry
under "New Features".

** New Features

*** Recognize keywords provided by frameworks (experimental)

This feature, in particular its activation and customization, are
experimental and subject to change.

**** New customization group: cperl-keyword-sets

This group comes with one new option cperl-automatic-keyword-sets
(default: t).  If true, then cperl-mode applies heuristics which
barewords are "keywords" of some framework.

**** Applicability

Currently this works for the keywords of the following modules:

 - Moose, Moose::Role, Moo, Moo::Role: They bring a bunch of "keywords"
   which technically are imported subs.

 - MooseX::Declare: That module is deprecated, but an excellent
   playground to prepare for Cor.

 - Zydeco is an even richer OO framework than Moose.

 - Test::More comes with the Perl core, highlighting the imports
   makes counting test cases easier.

 - Plack::Builder because the Author uses it

 - Function::Parameters by popular request.

Both the heuristics to detect applicability and the mechanism to
inject keyword sets are work in progress.

Syntax highlighting and indexing for imenu/speedbar and TAGS
generation recognize the new keywords, there are still some bugs
to be fixed.  Known shortcomings are:

 - TAGS generation: "mass" generation of TAGS files uses the active
   keyword set from the source from where it was invoked.  This is
   pretty hard to fix for cperl-etags, where the regular expressions
   are sent to the external etags command for all files at once, and
   probably even harder for cperl-write-tags.

 - Tags generation: Subclasses in MooseX::Declare syntax (class Foo
   extends Bar {...}) are not yet recognized by imenu.  The TAGS file,
   however, recognizes them.

 - Syntax highlighting: Highlighting of subroutine parameters of
   MooseX::Declare methods is different from what Jonathan Rockwell
   did in his mx-declare branch.

New keyword sets can be added as a feature of cperl-mode, or in an
init file as you wish.

**** New commands

If the automatic detection of applicable keywords fails, you can
manually fix it with the following commands:

 - cperl-activate-keyword-set (name): Prompt for NAME (with
   completion) and activate the keyword from that set.

   Example: The Perl module 'oose' behaves like Moose, but isn't
   recognized.  If you want the Moose keywords recognized, run:

       M-x cperl-activate-keyword-set <RET> Moose <RET>

 - cperl-deactivate-keyword-set (name): Prompt for NAME (with
   completion) and deactivate the keywords from that set.

   Example: If you have 'use Moose' somewhere in your POD, then
   cperl-mode will activate Moose keywords.  You can stop this with
   the command:

       M-x cperl-deactivate-keyword-set <RET> Moose <RET>

*** Indentation: Add PBP's recommendation as an indentation style

In his book "Perl Best Practices", Damian Conway gives recommendations
about indenting styles, and also provides the corresponding settings
for Emacs.  These settings are now available as a new indenting style
"PBP".

*** Builtin documentation: Better POD reading in Emacs

The old POD -> pod2man -> man -> plaintext approach was quite lossy,
given that POD is rather expressive.  Direct conversions from POD to
e.g. texinfo seems to be no longer available, so for the moment we
have a different approach: POD -> pod2html -> Emacs shr (that's the
"simple HTML renderer" which was imported from Gnus).  The shr
renderer doesn't support fancy things like CSS and JavaScript, but the
pod2html output doesn't need it anyway, so there's nothing lost.

Instead of the old dependencies on pod2man and man we now have
dependencies on pod2html and perldoc - but unlike man, these are
readily available on all platforms.  Also, Emacs needs to be built
with libxml2 support, but this seems to be the case in Linux
distributions and for the MS Windows version.

At the time of this writing, a lot of the builtin documentation is
either outdated or just broken, so there's still work to do.  Also,
the HTML formatting in published versions of Emacs as a downside that
it doesn't distinguish between variable-pitch and fixed-pitch fonts,
so some POD formatting is rendered invisible.

**** New customization options: cperl-perldoc-program, cperl-pod2html-program

In case the external programs perldoc and pod2html are not on your path,
the actual locations can be customized.

**** Improved command: cperl-perldoc

The command now takes an optional second parameter for the section
within a POD file.  This is used when a POD link element specifies a
section either in the same, or in another POD file. (Yes, you can
follow links with the new POD reader).

** Changes invisible to users

*** Regexp refactoring

Many of the regular expressions in cperl-mode were hard-coded
literals (or even optimized literals).  Now, the lists of keywords
are actual elisp lists and are converted to optimized regular
expressions at runtime.  That way, different cperl-mode buffers
can enjoy different keyword sets:  Either reflecting different
Perl versions, or extensions which come with their own keywords.

*** Style changes

Elisp style is monitored with leotaku's elisp-check as a GitHub
action, and all new code conforms to the recommendations without
errors nor warnings.

All errors in the old code have been fixed, but not all of the
warnings.

*** Eliminating obsolete stuff

CPerl had its own multi-line font locking, which is no longer needed
with current font-lock.  It also refers to a feature "font-lock-extra"
and to "choose-color.el" which are no longer available, but also not
needed by cperl-mode.  All conditionals checking for these features
have been removed.

*** Test files

For the bugs fixed with this this fork of cperl-mode, there are now
the first test files in test/lisp/progmodes/cperl-mode.

I'm have limited elisp experience and I've just started to learn ERT.
So I know these tests are lame, and guess that there are better ways
to do so.  I'll decide later whether I'll collect all the tests in one
file.

----------------------------------------------------------------------
This file is not (or: not yet) part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.


Local variables:
coding: utf-8
mode: outline
paragraph-separate: "[ 	]*$"
end:
